import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import Catalogo from './Catalogo';
import { BrowserRouter } from 'react-router-dom';

describe("Botones de Categor√≠a en Cat√°logo", () => {
  beforeEach(() => {
    // Mock localStorage para el carrito
    Storage.prototype.getItem = jest.fn(() => JSON.stringify([]));
    Storage.prototype.setItem = jest.fn();
  });

  it("muestra ambos botones de categor√≠a correctamente", () => {
    render(
      <BrowserRouter>
        <Catalogo />
      </BrowserRouter>
    );

    const botonCafes = screen.getByText("‚òï Ver Caf√©s Premium");
    const botonInsumos = screen.getByText("üõ†Ô∏è Ver Insumos de Caf√©");

    expect(botonCafes).toBeInTheDocument();
    expect(botonInsumos).toBeInTheDocument();
  });

  it("al hacer click en 'Ver Caf√©s Premium', muestra solo productos de caf√©", () => {
    render(
      <BrowserRouter>
        <Catalogo />
      </BrowserRouter>
    );

    const botonCafes = screen.getByText("‚òï Ver Caf√©s Premium");
    fireEvent.click(botonCafes);

    // Verificar que se muestran caf√©s
    expect(screen.getByText("Caf√© Daroma")).toBeInTheDocument();
    expect(screen.getByText("Manuel Caffe")).toBeInTheDocument();
    expect(screen.getByText("Caf√© Nestle Bonka")).toBeInTheDocument();

    // Verificar que NO se muestran insumos
    expect(screen.queryByText("Kit Basico Barista")).toBeNull();
    expect(screen.queryByText("Prensa Francesa")).toBeNull();
  });

  it("al hacer click en 'Ver Insumos de Caf√©', muestra solo insumos", () => {
    render(
      <BrowserRouter>
        <Catalogo />
      </BrowserRouter>
    );

    const botonInsumos = screen.getByText("üõ†Ô∏è Ver Insumos de Caf√©");
    fireEvent.click(botonInsumos);

    // Verificar que se muestran insumos
    expect(screen.getByText("Kit Basico Barista")).toBeInTheDocument();
    expect(screen.getByText("Prensa Francesa")).toBeInTheDocument();
    expect(screen.getByText("Jarra de 20 Oz")).toBeInTheDocument();

    // Verificar que NO se muestran caf√©s
    expect(screen.queryByText("Caf√© Daroma")).toBeNull();
    expect(screen.queryByText("Manuel Caffe")).toBeNull();
  });

  it("muestra ambas categor√≠as cuando no hay filtro activo", () => {
    render(
      <BrowserRouter>
        <Catalogo />
      </BrowserRouter>
    );

    // Verificar que ambas categor√≠as est√°n visibles inicialmente
    expect(screen.getByText("Caf√© Daroma")).toBeInTheDocument(); // Caf√©
    expect(screen.getByText("Kit Basico Barista")).toBeInTheDocument(); // Insumo
  });
});

import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import Catalogo from './Catalogo';
import { BrowserRouter } from 'react-router-dom';

describe("Filtros de precio m√≠nimo y m√°ximo en Catalogo", () => {
  beforeEach(() => {
    Storage.prototype.getItem = jest.fn(() => JSON.stringify([]));
    Storage.prototype.setItem = jest.fn();
  });

  it("filtra productos cuando se ingresa precio m√≠nimo", () => {
    render(
      <BrowserRouter>
        <Catalogo />
      </BrowserRouter>
    );

    const inputPrecioMin = screen.getByPlaceholderText("Precio m√≠nimo");

    fireEvent.change(inputPrecioMin, { target: { value: "10000" } });

    expect(screen.getByText("Manuel Caffe")).toBeInTheDocument();
    expect(screen.getByText("Caf√© Nestle Bonka")).toBeInTheDocument();
    expect(screen.queryByText("Caf√© Daroma")).toBeNull();
  });

  it("filtra productos cuando se ingresa precio m√°ximo", () => {
    render(
      <BrowserRouter>
        <Catalogo />
      </BrowserRouter>
    );

    const inputPrecioMax = screen.getByPlaceholderText("Precio m√°ximo");

    fireEvent.change(inputPrecioMax, { target: { value: "10000" } });

    expect(screen.getByText("Caf√© Daroma")).toBeInTheDocument();
    expect(screen.getByText("Manuel Caffe")).toBeInTheDocument();
    expect(screen.queryByText("Kit Basico Barista")).toBeNull();
  });

  it("filtra productos cuando se ingresan ambos precios", () => {
    render(
      <BrowserRouter>
        <Catalogo />
      </BrowserRouter>
    );

    const inputPrecioMin = screen.getByPlaceholderText("Precio m√≠nimo");
    const inputPrecioMax = screen.getByPlaceholderText("Precio m√°ximo");

    fireEvent.change(inputPrecioMin, { target: { value: "8000" } });
    fireEvent.change(inputPrecioMax, { target: { value: "12000" } });

    expect(screen.getByText("Manuel Caffe")).toBeInTheDocument();
    expect(screen.getByText("Caf√© Nestle Bonka")).toBeInTheDocument();
    expect(screen.queryByText("Caf√© Daroma")).toBeNull();
    expect(screen.queryByText("Kit Basico Barista")).toBeNull();
  });

  it("muestra productos correctos con precio m√≠nimo 15000", () => {
    render(
      <BrowserRouter>
        <Catalogo />
      </BrowserRouter>
    );

    const inputPrecioMin = screen.getByPlaceholderText("Precio m√≠nimo");

    fireEvent.change(inputPrecioMin, { target: { value: "15000" } });

    expect(screen.getByText("Britt")).toBeInTheDocument();
    expect(screen.getByText("Caf√© Guatemala Antigua")).toBeInTheDocument();
    expect(screen.queryByText("Caf√© Colombia Supremo")).toBeNull();
  });

  it("muestra productos correctos con precio m√°ximo 5000", () => {
    render(
      <BrowserRouter>
        <Catalogo />
      </BrowserRouter>
    );

    const inputPrecioMax = screen.getByPlaceholderText("Precio m√°ximo");

    fireEvent.change(inputPrecioMax, { target: { value: "5000" } });

    expect(screen.getByText("Taza Cer√°mica")).toBeInTheDocument();
    expect(screen.queryByText("Caf√© Daroma")).toBeNull();
    expect(screen.queryByText("Cuchara Medidora")).toBeInTheDocument();
  });
});